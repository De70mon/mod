print('3' and '7' in str(123456789))

mx=0
s=0
x=int(input())
if x<0:
    s=x
b=7
b/=b

if x>mx:
    mx=x
print(s)
print(mx)

print("Перед исключением")
# теперь пользователь сам вводит числа для деления
a = int(input("a: "))
b = int(input("b: "))
c = a / b # здесь может возникнуть исключение деления на ноль
print(c) # печатаем c = a / b если всё хорошо
print(e) # Выводим информацию об ошибке
print("После исключения")

try:  # Добавляем конструкцию try-except для отлова нашей ошибки
    print("Перед исключением")
    # теперь пользователь сам вводит числа для деления
    a = int(input("a: "))
    b = int(input("b: "))
    c = a / b  # здесь может возникнуть исключение деления на ноль
    print(c)  # печатаем c = a / b если всё хорошо
except ZeroDivisionError as e:  # Добавляем тип именно той ошибки которую хотим отловить.
    print(e)  # Выводим информацию об ошибке
    print("После исключения")

print("После После исключения")

try:
    print("Перед исключением")
    a = int(input("a: "))
    b = int(input("b: "))
    c = a / b
    print(c)  # печатаем c = a / b, если всё хорошо
except ZeroDivisionError as e:
    print("После исключения")
else:  # код в блоке else выполняется только в том случае, если код в блоке try выполнился успешно (т.е. не вылетело никакого исключения).
    print("Всё ништяк")
finally:  # код в блоке finally выполнится в любом случае при выходе из try-except
    print("Finally на месте")

print("После После исключения")


age = int(input("How old are you?"))
if age > 100 or age <= 0:
    raise ValueError("Тебе не может быть столько лет")

try:
    age = int(input("How old are you?"))
    if age > 100 or age <= 0:
        raise ValueError("Тебе не может быть столько лет")
except ValueError as error:
    print(error)
    print("Неправильный возраст")
else:
    print(f"You are {age} years old!") # Возраст выводится только в случае, если пользователь ввёл правильный возраст.

print(f"Тебе {age} лет!")  # Возраст выводится только в случае, если пользователь ввёл правильный возраст.

try:
    a = int(input('Введите число:'))
except ValueError as a:
    print('Вы ввели неправильное число')
else:
    print('Вы ввели', a)
finally:
   print('Выход из программы')

a = int(input())
b = int(input())
if a % 2 != 0 and b % 2 != 0:
    print('Числа a и b нечетные')

if A % 2 == 1 and B % 2 == 1:
    print('Числа А и B нечетные')


if x > 0:
    if y > 0:               # x > 0, y > 0
         print("Первая четверть")
    else:                   # x > 0, y < 0
         print("Четвертая четверть")
else:
    if y > 0:               # x < 0, y > 0
         print("Вторая четверть")
    else:                   # x < 0, y < 0
         print("Третья четверть")

if x > 0 and y > 0:
    print("Первая четверть")
if x > 0 and y < 0:
    print("Четвертая четверть")
if x < 0 and y > 0:
    print("Вторая четверть")
if x < 0 and y < 0:
    print("Третья четверть")

month = int(input())
if month in [3, 4, 5]:
    print("Весна")
elif month in [6, 7, 8]:
    print("Лето")
elif month in [9, 10, 11]:
    print("Осень")
elif month in [12, 1, 2]:
    print("Зима")


def get_wind_class(speed): #объявление функции
    if 1 <= speed <= 4: #только аргумент
        return "weak [1]"
    elif 5 <= speed <= 10:
        return "moderate [2]"
    elif 11 <= speed <= 18:
        return"strong [3]"
    elif speed >= 19:
        return "hurricane [4]"
print(get_wind_class(13)) #Задаем скорость, мы просим программу напечатать то, что в скобках

def check_user(username, password):
    if username in user_database:
        if password == user_database[username]:
            return True
        else:
            return False
    else:
        return False

a = 42
b = 41
if a > b:
    result = a
else:
    result = b
ИЛИ
result = a if a > b else b

a=6
b=5
c=46
result = True if a <45 or b<45 or c<45 else False
print (result)

A = int(input('Введите первое число\n'))
B = int(input('Введите второе число\n'))
C = int(input('Введите третье число\n'))
if ((A < 45) and (B >= 45) and (C >=45)) or \
    ((A >= 45) and (B < 45) and (C >=45)) or \
    ((A >= 45) and (B >= 45) and (C < 45)):
    print('Есть число меньше 45 и только одно')
else:
    print('Числа меньше 45 нет или их несколько')

C = int(input('Введите число\n'))
if (-10 <= C <= -1) or (2 <= C <= 15):
    print('принадлежит')
else:
    print('не принадлежит')

A = int(input('Введите число\n'))
if not (-10 <= A <= -1 or 2 <= A <= 15):
    print("Число не принадлежит интервалу")
else:
    print("Число принадлежит интервалу")

A = int(input('Введите  двузначное число\n'))
if (A // 10 == 5 or A % 10 == 5):
    print("Число содержит 5")
else:
    print("Число не содержит 5")

n = 15
first_digit = n // 10
second_digit = n % 10
print((first_digit == 5) or (second_digit == 5))

list_ = [-5, 2, 4, 8, 12, -7, 5]
print(len(list_) == len(set(list_)))

a = input()
if str(a) == str(a)[::-1]:
    print("Полиндром")
else:
    print("Нет")

num = 12345678
print(str(num) == str(num)[::-1])

S = 0  # заводим переменную-счетчик, в которой мы будем считать сумму
N = 5
# заводим цикл for, в котором мы будем проходить по всем числам от одного до N
for i in range(1, N + 1):  # равносильно выражению for i in [1, 2, 3, ... , N -1, N]:
    print("Значение суммы на предыдущем шаге: ", S)
    print("Текущее число: ", i)
    S = S + i  # cуммируем текущее число i и перезаписываем значение суммы
    print("Значение суммы после сложения: ", S)
    print("---")
print("Конец цикла")
print()
print("Ответ: сумма равна = ", S)

S = 1  # заводим переменную-счетчик, в которой мы будем считать произведение
N = 5
# заводим цикл for, в котором мы будем проходить по всем числам от одного до N
for i in range(1, N + 1):  # равносильно выражению for i in [1, 2, 3, ... , N -1, N]:
    print("Значение произведения на предыдущем шаге: ", S)
    print("Текущее число: ", i)
    S = S * i  # умножаем текущее число i и перезаписываем значение суммы
    print("Значение произведения после умножения: ", S)
    print("---")
print("Конец цикла")
print()
print("Ответ: произведение равно = ", S)

P = 1  # заводим переменную-счетчик, в которой мы будем считать произведение
N = 5
# запишите цикл for для подсчета произведения
for i in range(1, N+1):
    P *= i
print(P)

P = 0
n = int(input())
for i in range(n):
    P += 1
    print(P * "*")

N = 5
for i in range(1, N + 1):
    print("*" * i)

S = 0  # заводим переменную-счетчик, в которой мы будем считать сумму
n = 1  # текущее натуральное число
# заводим цикл while, который будет работать, пока сумма не превысит 500
while S < 500:  # делай пока ...
    S += n  # увеличиваем сумму, равносильно S = S + n
    n += 1  # так как сумма ещё не достигла нужного значения, то увеличиваем переменную-счетчик
    print("Ещё считаю =", S)
print("Сумма равна: ", S)
print("Количество чисел: ", n)


S = 1
while S**2 < 1000:  # делай пока ...
    S += 1  # так как сумма ещё не достигла нужного значения, то увеличиваем переменную-счетчик
print("Возведение в квадрат: ", S)


n = 1
while n ** 2 < 1000:
    n += 1
print(n)


хорошо
n = 1
while True:  # в данной программе это условие всегда True, цикл будет бесконечным
   print("Hello World")
   n += 1
   if n > 10:  # условие, при достижении которого цикл while будет принудительно завершен
       break


n = 1
while True:  # в данной программе это условие всегда True, цикл будет бесконечным
   print(n)
   n += 1
   if n**2 > 1000:  # условие, при достижении которого цикл while будет принудительно завершен
       break

n = 1
while True:
    if n ** 2 >= 1000:
        print("Последнее число", n - 1)
        break
    n += 1

N = 2
M = 3
# # заполнили матрицу последовательными числами
matrix = [
    [0, 1, 2],
    [3, 4, 5],
]
for i in range(N):  # цикл, отвечающий за строки
    for j in range(M):  # цикл, отвечающий за столбцы
        print(matrix[i][j], end=" ")
# 0 1 2 3 4 5


N = 2
M = 3
# # заполнили матрицу последовательными числами
matrix = [
    [0, 1, 2],
    [3, 4, 5],
]
for i in range(N):
    for j in range(M):
        print(matrix[i][j], end=" ")
    print()  # перенос на новую строку
0 1 2
3 4 5


random_matrix = [
    [9, 2, 1],
    [2, 5, 3],
    [4, 8, 5]
]
mean_value_rows = []  # здесь будут храниться средние значения для каждой строки
min_value_rows = []  # здесь будут храниться минимальные значения для каждой строки
min_index_rows = []  # здесь будут храниться индексы минимальных значений для каждой строки
max_value_rows = []  # здесь будут храниться максимальные значения для каждой строки
max_index_rows = []  # здесь будут храниться индексы максимальных значений для каждой строки
for row in random_matrix:  # здесь мы целиком берем каждую сроку
    min_index = 0  # в качестве минимального значения возьмем первый элемент строки
    max_index = 0
    min_value = row[min_index]  # начальное минимальное значение для каждой строки будет новое
    max_value = row[max_index]  # для максимального значения тоже самое
    for index_col in range(len(row)):
        if row[index_col] < min_value:
            min_value = row[index_col]
            min_index = index_col
        if row[index_col] > max_value:
            max_value = row[index_col]
            max_index = index_col
    min_value_rows.append(min_value)
    min_index_rows.append(min_index)
    max_value_rows.append(max_value)
    max_index_rows.append(max_index)
print(min_value_rows)
print(min_index_rows)
print(max_value_rows)
print

list_ = [-5, 2, 4, 8, 12, -7, 5]
# Объявим переменную, в которой будем хранить индекс отрицательного элемента
index_negative = None

for i in range(len(list_)):
    if list_[i] < 0:
        print("Отрицательное число: ", list_[i])
        index_negative = i  # перезаписываем значение индекса
        print("Новый индекс отрицательного числа: ", index_negative)
    else:
        print("Положительное число: ", list_[i])
    print("---")
print("Конец цикла")
print()
print("Ответ: индекс последнего отрицательного элемента = ", index_negative)

индекс последнего отрицательного элемента = ", index_negative)


list_ = [-5, 2, 4, 8, 12, -7, 5]
# Объявим переменную, в которой будем хранить индекс отрицательного элемента
index_negative = None

for i, value in enumerate(list_):
   if value < 0:
       print("Отрицательное число: ", value)
       index_negative = i  # перезаписываем значение индекса
       print("Новый индекс отрицательного числа: ", index_negative)
   else:
       print("Положительное число: ", value)
   print("---")
print("Конец цикла")
print()
print("Ответ:
list_ = [-5, 2, 4, 8, 12, -7, 5]
# Объявим переменную, в которой будем хранить индекс отрицательного элемента
index_negative = None


list_ = [-5, 2, 4, 8, 12, -7, 5]

for i in range(len(list_)):  # равносильно выражению for i in [0, 1, 2, 3, 4, 5, 6]:
    print("Индекс элемента: ", i)
    print("Значение элемента: ", list_[i])  # с помощью индекса получаем значение элемента
    print("---")
print("Конец цикла")

list_ = [-5, 2, 4, 8, 12, -7, 5]
# Функция enumerate возвращает данные в виде кортежей,
# где на первом месте стоит индекс, а затем значение
# [(0, -5), (1, 2), (2, 4), ...]
for i, value in enumerate(list_):
    print("Индекс элемента: ", i)
    print("Значение элемента: ", value)  # с помощью индекса получаем значение элемента
    print("---")
print("Конец цикла")

n = 81
while True:
    if n % 3 == 0:
        n = n // 3
        if n == 1:
            break
    else:
        break

n = int(input("Введите число\n"))
while True:
    if n % 2 == 0:
        n = n // 2
    else:
        n = (n * 3 + 1) // 2
    print(n)
    if n == 1:
        print("Done")
        break

heads = 35  # количество голов
legs = 94  # количество ног

for r in range(heads + 1):  # количество кроликов
    for ph in range(heads + 1):  # количество фазанов
        #  если суммарное количество голов превышено или ног превышено, то переходим на следующий шаг цикла
        if (r + ph) > heads or \
            (r * 4 + ph * 2) > legs:
            continue
        if (r + ph) == heads and (r * 4 + ph * 2) == legs:
            print("Количество кроликов", r)
            print("Количество фазанов", ph)
            print("---")

some_var = (2,)
if some_var is None:
    print("NoneType")
else:
    print(type(some_var))

a = '' # пустая строка
b = a or 1
print(b)
print(type(b))

a = "foo"
b = "bar"
print(1 and a or b)

a = 0
b = False
# if a and b : # проверка истинности обеих переменных
#     print("Обе переменные истинные")
#     print(a,b)

if a and b:
    print("Обе переменные истинные")
    print(a, b)
elif a or b:
    print("Одна из переменных истинная")
    print(a, b)  # печать значения одной переменной, которая является истинной
else:
    print("Обе переменные ложные")
    print(a, b)

a = int(input())
if type(a) == int:
    if 100 <= a <= 999:
        if a % 2 == 0:
            if a % 3 == 0:
                print("Число удовлетворяет условиям")

if typ(a) == int and  100 <= a <= 999 and  a % 2 == 0 and  a % 3 == 0:
    print("Число удовлетворяет условиям")

if all([type(a) == int,
        100 <= a <= 999,
        a % 2 == 0,
        a % 3 == 0]):
    print("Число удовлетворяет условиям")


Напишите программу, которая на вход принимает последовательность целых чисел, и возвращает True, если все числа ненулевые, и False, если хотя бы одно число равно 0.
L = list(map(int, input().split()))
print(all(L))

Напишите программу, которая на вход принимает последовательность целых чисел и возвращает True, если все числа равны нулю, и False, если найдется хотя бы одно ненулевое число. Разрешается использование только логических операторов и функций all([ ]) и any([ ]).
L = list(map(int, input().split()))
print(any(L))

squares = [i**2 for i in range(1,11)]
# [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
print(squares)

list_tuples = [(i, i**2) for i in range(1,11)]
print(list_tuples)
[(1, 1), (2, 4), (3, 9), (4, 16), (5, 25), (6, 36), (7, 49), (8, 64), (9, 81), (10, 100)]

А используя вложенные генераторы списков можно создать матрицу «одним махом»:
M = [[i+j for j in range(5)] for i in range(5)]
print(M)
[[0, 1, 2, 3, 4], [1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8]]
[[0, 1, 2, 3, 4],
[1, 2, 3, 4, 5],
[2, 3, 4, 5, 6],
[3, 4, 5, 6, 7],
[4, 5, 6, 7, 8]]

p = [i * n for i in range(1, 11) for n in range(1, 11)]
print(p)

L = [int(input()) % 2 == 0 for i in range(5)]
print(L)
print(any(L))
print(not all(L))
print(any(L) and not all(L))

L = [input() for i in range(5)]
print (L)

L = [i for i in range(10)]
# 0 1 2 3 4 5 6 7 8 9
M = [i for i in range(10,0,-1)]
# 10 9 8 7 6 5 4 3 2 1
И нам необходимо создать новый список, который будет состоять из произведений соответствующих элементов друг на друга.

# он должен выглядеть так
# 0 9 16 21 24 25 24 21 16 9
Мы знаем, что элементов в списке десять, поэтому можем пробежаться в цикле по индексам от 0 до 10:

N = [ ]

for i in range(10):
    N.append(L[i] * M[i])
Такой код является корректным, но не «питоновским». Мы знаем, что циклом for можно итерировать сразу списки.

Например:
for a in L:
    # какой-то код

В Python существует функция zip(), которая позволяет объединить два списка в новый список кортежей, каждый из которых будет содержать по одному элементу из каждого списка.
for a in zip(L,M):
    print(a)
#(0, 10)
#(1, 9)
#(2, 8)
#(3, 7)
#(4, 6)
#(5, 5)
#(6, 4)
#(7, 3)
#(8, 2)
#(9, 1)
Код можно сделать еще более приятным:

for a, b in zip(L,M):
    print('a =', a, 'b =', b)
#a = 0 b = 10
#a = 1 b = 9
#a = 2 b = 8
#a = 3 b = 7
#a = 4 b = 6
#a = 5 b = 5
#a = 6 b = 4
#a = 7 b = 3
#a = 8 b = 2
#a = 9 b = 1
Сначала мы склеили два списка поэлементно, а потом на каждой итерации делали развертку кортежей на две переменные — a и b, которые использовали в теле самого цикла.
Аналогично можно использовать функцию zip() и внутри генераторов списков.

Используя функцию zip() внутри генераторов списков, вычислите поэлементные произведения списков L и M.
L = [i for i in range(10)]
M = [i for i in range(10,0,-1)]
N = [a*b for a,b in zip(L,M)]
print(N)

Реализуйте программу, которая сжимает последовательность символов. На вход подается последовательность вида:
aaabbccccdaa
Необходимо вывести строку, состоящую из символов и количества повторений этого символа. Вывод должен выглядеть как:
a3b2c4d1a2

text = input()  # получаем строку
first = text[0]  # сохраняем первый символ
count = 0  # заводим счетчик
result = ''  # и результирующую строку

for c in text:
    if c == first:  # если символ совпадает с сохраненным,
        count += 1  # то увеличиваем счетчик
    else:
        result += first + str(count)  # иначе - записываем в результат
        first = c  # и обновляем сохраненный символ с его счетчиком
        count = 1

result += first + str(count)  # и добавляем в результат последний символ
print(result)
