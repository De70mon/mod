def multi_table(number):
    st = str()
    for x in range(1, 11):
        z = x * number
        st += '{} * {} = {}\n'.format(x, number, z)
    return st
print(multi_table(5))

def multi_table(number):
    st = str()
    for x in range(1, 11):
        z = x * number
        st += f'{x} * {number} = {z}\n'
    return st
print(multi_table(5))

def d_o(num):
    return int(''.join(sorted(str(num), reverse=True)))
print(d_o(42145))

# объявили функцию для подсчета количества символов в тексте
def char_frequency():
   text = """
   У лукоморья дуб зелёный;
   Златая цепь на дубе том:
   И днём и ночью кот учёный
   Всё ходит по цепи кругом;
   Идёт направо -- песнь заводит,
   Налево -- сказку говорит.
   Там чудеса: там леший бродит,
   Русалка на ветвях сидит;
   Там на неведомых дорожках
   Следы невиданных зверей;
   Избушка там на курьих ножках
   Стоит без окон, без дверей;
   Там лес и дол видений полны;
   Там о заре прихлынут волны
   На брег песчаный и пустой,
   И тридцать витязей прекрасных
   Чредой из вод выходят ясных,
   И с ними дядька их морской;
   Там королевич мимоходом
   Пленяет грозного царя;
   Там в облаках перед народом
   Через леса, через моря
   Колдун несёт богатыря;
   В темнице там царевна тужит,
   А бурый волк ей верно служит;
   Там ступа с Бабою Ягой
   Идёт, бредёт сама собой,
   Там царь Кащей над златом чахнет;
   Там русский дух... там Русью пахнет!
   И там я был, и мёд я пил;
   У моря видел дуб зелёный;
   Под ним сидел, и кот учёный
   Свои мне сказки говорил.
   """

   text = text.lower()
   text = text.replace(" ", "")
   text = text.replace("\n", "")

   count = {}  # для подсчета символов и их количества
   for char in text:
       if char in count:  # если символ уже встречался, то увеличиваем его количество на 1
           count[char] += 1
       else:
           count[char] = 1

   for char, cnt in count.items():
       print(f"Символ {char} встречается {cnt} раз")

...

# вызвали функцию в любом месте программы
char_frequency(У лукоморья дуб зелёный;
   Златая цепь на дубе том:
   И днём и ночью кот учёный
   Всё ходит по цепи кругом;
   Идёт направо -- песнь завдит,
   Налево -- сказку говорит.о
   Там чудеса: там леший бродит,)


def print_2_add_2():
   result = 2 + 2
   print(result)

print_2_add_2()

def HW():
   result = 'Hello World'
   print(result)

def hello_world():
   print("Hello World")

hello_world()
HW()
print_2_add_2()

Не очень хорошо, что наша функция char_frequency умеет работать только с одним текстом. Нужно срочно исправлять ситуацию и делать её универсальной. Тогда объявление функции будет выглядеть по-другому:
объявили функцию для подсчета количества символов в неком абстрактном тексте
def char_frequency(text):
   text = text.lower()
   text = text.replace(" ", "")
   text = text.replace("\n", "")

   count = {}  # для подсчета символов и их количества
   for char in text:
       if char in count:  # если символ уже встречался, то увеличиваем его количество на 1
           count[char] += 1
       else:
           count[char] = 1

   for char, cnt in count.items():
       print(f"Символ {char} встречается {cnt} раз")
#Отличие в том, что функция char_frequency принимает переменную text, которая ещё называется аргументом функции. И дальше внутри себя она работает с переменной text, не завися от её содержимого.

# функция, которая возводит любое число в квадрат



def pow_func(base):
   print(base ** 2)

pow_func(3)  # 9
pow_func(5)  # 25

char_frequency("jonrgtgbv reighkl; er;vgjoi0kmgviokm ")

функция, которая возводит любое число в степень n
def pow_func(base=8, n=2):
   print(base ** n)

pow_func(3)  # 9
pow_func(5, 3)  # 125
pow_func()

def check_num(a, n):
   if a % n == 0:
       print(f"Число {n} является делителем числа {a}")
   else:
       print(f"Число {n} не является делителем числа {a}")

check_num(4, 2)  # Число 2 является делителем числа 4
check_num(5, 2)  # Число 2 не является делителем числа 5

def reverse_ladder(a):
    for i in range(a, 0, -1):
        print("*" * i)
#reverse_ladder(5)
print(reverse_ladder(5))

#функция, которая возводит любое число в степень n
def pow_func(base=8, n=2):
   print(base ** n)

pow_func(3)  # 9
pow_func(5, 3)  # 125
pow_func()
print(pow_func(3))

Сделаем так, чтобы наша функция возвращала результат вычисления:

def pow_func(base, n=2):
    inside_result = base ** n
    return inside_result

print(pow_func(3))
# 9

Видим, что None пропало, и функция возвращает только результат вычисления, который содержится в переменной inside_result. Работа функции в таком случае может быть представлена вот так:
Источник: lh3.googleusercontent.com
Мы даже можем присвоить этот результат некоторой переменной и использовать это значение вне тела функции.

outside_result = pow_func(3)
print(outside_result)
# 9

def get_multipliers(a):
   count = 0
   for n in range(1, a + 1):
       if a % n == 0:
           count += 1

   return count

print(get_multipliers(5))  # 2
print(get_multipliers(4))  # 3


x = 3
def function():
    print(x)
    return x
print(function())


x = 3
def func():
    global x  # объявляем, что переменная является глобальной
    print(x)
    x = 5
    x += 5
    return x
print(func())
x=5
func()

def get_my_func():
   def hello_world():
       print("Hello")
   return hello_world

hello_world_func = get_my_func()  # получить функцию в качестве результата

print(type(hello_world_func))  # <class 'function'>
hello_world_func()  # Hello

def get_mul_func(m):
    nonlocal_m = m
    def local_mul(n):
        return n * nonlocal_m
    return local_mul

two_mul = get_mul_func(2)  # возвращаем функцию, которая будет умножать числа на 2
print(two_mul(5))  # 5 * 2
get_mul_func(7)

PI = 3.14
def area_circle(r):
    global PI
    print('Число выведенное из локальной области видимости до изменения ', PI)
    PI = 3.1415  # Измнение глобальной переменной внутри функции - ДЕЛАТЬ не ЖЕЛАТЕЛЬНО (ОЧЕНЬ ПЛОХО)
    print('Число выведенное из локальной области видимости после изменения ', PI)
    return PI * (r ** 2)

print('Число выведенное из глобальной области видимости до вызова функции', PI)
print(area_circle(10))
print('Число выведенное из глобальной области видимости после вызова функции', PI)

Мы можем передавать ей неограниченное количество позиционных аргументов, и она будет обрабатывать их без каких-либо ошибок. Как заранее при определении функции понять количество переменных, которое нам заблагорассудится передать? В общем-то никак, нужно абстрагироваться от этого и принимать переменное количество позиционных аргументов, а для этого есть специальный оператор * («звездочка»).



Оператор * чаще всего ассоциируется с операцией умножения, но в Python он имеет и другой смысл. Этот оператор позволяет «распаковывать» (получить все значения из какой-либо последовательности, а не саму последовательность)
объекты (например, списки или кортежи), внутри которых хранятся некие элементы. Не используя оператор распаковки, если мы захотим поместить список а в список b, мы просто укажем его в качестве одного из элементов нового списка. Но если мы захотим добавить именно значение из первого списка, а не сам список, то как раз оператор распаковки сделает это, то есть он вытащит из нашего списка все значения.

a = [1, 2, 3]
b = [a, 4, 5, 6]
print(b)
# [[1, 2, 3], 4, 5, 6]

a = [1, 2, 3]
b = [*a, 4, 5, 6]
print(b)
# [1, 2, 3, 4, 5, 6]
То есть оператор распаковки позволяет работать со значением последовательности, а не с самой последовательностью. В первом случае функция print печатает список, а во втором — все значения списка:

print(a) # [1, 2, 3]
print(*a)  # 1 2 3

Чтобы правильно обрабатывать * args и ** kwargs нужно представлять, чем они являются. А собственно
args — это кортеж, а kwargs  — это словарь.

def my_func(*args, **kwargs):
    print(type(args))
    print(type(kwargs))
my_func()

# <class 'tuple'>
# <class 'dict'>
# Давайте рассмотрим задачку и сделаем функцию сумматор, которая будет складывать любое  переданных ей аргументов.


def adder(*nums):
    sum_ = 0
    for n in nums:
        sum_ += n
    return sum_
print(adder())  # 0
print(adder(1))  # 1
print(adder(1, 2))  # 3
print(adder(1, 2, 3))  # 6
print(adder(1, 2, 3, 8))


def add(*num):
    pr_ = 1
    for n in num:
        pr_ *= n
    return pr_
print(add(1, 8, 2))

def fact(n):
    if n==1: # терминальный случай
        return 1
    return n*(fact(n-1))  # рекурсивный вызов

print (fact(3))

где n — это порядковый номер числа Фибоначчи.
def rec_fibb(n):
   if n == 1:
       return 1
   if n == 2:
      return 1
   return rec_fibb(n - 1) + rec_fibb(n - 2)

rec_fibb(10)  # 55
print(rec_fibb(39))

С помощью рекурсивной функции найдите сумму чисел от 1 до n.
def rec_sum(n):
   if n == 1:  # терминальный случай
       return 1
   return n + rec_sum(n - 1)  # рекурсивный вызов

print (rec_sum(2))

С помощью рекурсивной функции разверните строку.
def reverse_str(string):
   if len(string) == 0:
       return ''
   else:
       return string[-1] + reverse_str(string[:-1])

reverse_str('test')  # tset
print (reverse_str('dima'))

Дано натуральное число N. Вычислите сумму его цифр.
При решении этой задачи нельзя использовать строки, списки, массивы (ну и циклы, разумеется).
def sum_digit(n):
   if n < 10:
       return n
   else:
       return n % 10 + sum_digit(n // 10)

sum_digit(123)  # 6


def fib():
    a, b = 0,1
    yield a
    yield b
    while True:
        a, b = b, a+b
        yield b
for num in fib():
   print(num)


def count(start=1, step=1):
    counter = start
    while True:
        yield counter
        counter += step

print(count(5, 5))


def repeat_list(list_):
   list_values = list_.copy()
   while True:
       value = list_values.pop(0)
       list_values.append(value)
       yield value

for i in repeat_list([1, 2, 3]):
   print(i)

iter(int)  # TypeError: 'type' object is not iterable
print(iter([1, 2, 3]))  # <list_iterator at 0x7fb593ca1940>
print(iter((1, 2)))
print(iter({1: "ok"}))

Для лучшего понимания функций высшего порядка можно представить себе конвейер, который собирает других роботов. То есть некая техника собирает другую технику.
Сделаем функцию, которая будет выполнять принимаемую функцию дважды:
def twice_func(inside_func):
    #"""Функция, выполняющая дважды функцию принятую в качестве аргумента"""
    inside_func()
    inside_func()

def hello():
    print("Hello")

test = twice_func(hello)
# Hello
# Hello

def make_adder(x):
   def adder(n):
       return x + n # захват переменной "x" из nonlocal области
   return adder  # возвращение функции в качестве результата

# функция, которая будет к любому числу прибавлять пятёрку
add_5 = make_adder(5)
print(add_5(10))  # 15
print(add_5(100))  # 105


def my_decorator(a_function_to_decorate):
    # Здесь мы определяем новую функцию - «обертку». Она нам нужна, чтобы выполнять
    # каждый раз при вызове оригинальной функции, а не только один раз
    def wrapper():
        # здесь поместим код, который будет выполняться до вызова, потом вызов
        # оригинальной функции, потом код после вызова
        print("Я буду выполнен до основного вызова!")

        result = a_function_to_decorate()  # не забываем вернуть значение исходной функции

        print("Я буду выполнен после основного вызова!")
        return result
    return wrapper
def my_function():
   print("Я - оборачиваемая функция!")
   return 0

print(my_function())
# Я - оборачиваемая функция!
# 0

decorated_function = my_decorator(my_function)  # декорирование функции
print(decorated_function())

Видим, что задекорировав my_function, мы добавили к ней новый функционал, не меняя исходный код самой функции.
Зачем это нужно? Например, декораторы могут замерять время выполнения функции либо количество запусков конкретной функции, также можно сохранять результаты вычисления (кеширование).
Давайте попробуем замерить время выполнения системной функции для возведения числа в степень 2 и соответствующего оператора.

import time

def decorator_time(fn):
   def wrapper():
       print(f"Запустилась функция {fn}")
       t0 = time.time()
       result = fn()
       dt = time.time() - t0
       print(f"Функция выполнилась. Время: {dt:.10f}")
       return dt  # задекорированная функция будет возвращать время работы
   return wrapper


def pow_2():
   return 10000000 ** 2


def in_build_pow():
   return pow(10000000, 2)


pow_2 = decorator_time(pow_2)
in_build_pow = decorator_time(in_build_pow)

pow_2()
# Запустилась функция <function pow_2 at 0x7f938401b158>
# Функция выполнилась. Время: 0.0000011921

in_build_pow()
# Запустилась функция <function in_build_pow at 0x7f938401b620>
# Функция выполнилась. Время: 0.0000021458

import time
N = 100
def decorator_time(fn):
   def wrapper():
       t0 = time.time()
       result = fn()
       dt = time.time() - t0
       return dt
   return wrapper


def pow_2():
   return 10000000 ** 2


def in_build_pow():
   return pow(10000000, 2)


pow_2 = decorator_time(pow_2)
in_build_pow = decorator_time(in_build_pow)

mean_pow_2 = 0
mean_in_build_pow = 0
for _ in range(N):
   mean_pow_2 += pow_2()
   mean_in_build_pow += in_build_pow()

print(f"Функция {pow_2} выполнялась {N} раз. Среднее время: {mean_pow_2 / N:.10f}")
print(f"Функция {in_build_pow} выполнялась {N} раз. Среднее время: {mean_in_build_pow / 100:.10f}")

декоратор, в котором встроенная функция умеет принимать аргументы
def do_it_twice(func):
   def wrapper(*args, **kwargs):
       func(*args, **kwargs)
       func(*args, **kwargs)
   return wrapper

@do_it_twice
def say_word(word):
   print(word)

say_word("Oo!!!")
# Oo!!!
# Oo!!!

Подведем итог по декораторам:

Декораторы добавляют дополнительное поведение функции без изменения её исходного кода.
Декораторы —  вызовы дополнительных функций, поэтому они немного замедляют ваш код.
Для передачи аргументов декорируемой функции используйте *args и **kwargs.
Вот универсальный шаблон для декоратора:

def my_decorator(fn):
    print("Этот код будет выведен один раз в момент декорирования функции")
    def wrapper(*args, **kwargs):
        print('Этот код будет выполняться перед каждым вызовом функции')
        result = fn(*args, **kwargs)
        print('Этот код будет выполняться после каждого вызова функции')
        return result
    return wrapper

Напишите декоратор, который будет подсчитывать количество вызовов декорируемой функции. Для хранения переменной, содержащей количество вызовов, используйте nonlocal область декоратора.
def counter(func):
   count = 0
   def wrapper(*args, **kwargs):
       nonlocal count
       func(*args, **kwargs)
       count += 1
       print(f"Функция {func} была вызвана {count} раз")
   return wrapper

@counter
def say_word(word):
   print(word)

say_word("Oo!!!")
# Oo!!!
# Функция <function say_word at 0x7f93836d47b8> была вызвана 1 раз

say_word("Oo!!!")
# Oo!!!
# Функция <function say_word at 0x7f93836d47b8> была вызвана 2 раз
say_word("Oo!!!")
say_word("Oo!!!")
say_word("Oo!!!")

Напишите декоратор, который будет сохранять результаты выполнения декорируемой функции в словаре. Словарь должен находиться в nonlocal области в следующем формате: по ключу располагается аргумент функции, по значению результат работы функции, например, {n: f(n)}.

И при повторном вызове функции будет брать значение из словаря, а не вычислять заново. То есть словарь можно считать промежуточной памятью на время работы программы, где будут храниться ранее вычисленные значения. Исходная функция, которую нужно задекорировать имеет следующий вид и выполняет простое умножение на число 123456789:


def linear_solve(a, b):
    return b/a
print(linear_solve(2, 9))
print(linear_solve(0,1))

def linear_solve(a, b):
    if a: # помним, что 0 интерпретируется как False, иначе — True
        return b/a
    elif not a and not b:  # снова используем числа в логических выражениях
        return "Бесконечное количество корней"
    else:
        return "Нет корней"

print(linear_solve(0,1))
print(linear_solve(0,0))
print(linear_solve(1,1))

# a*x**2 + b*x + c = 0 - общий вид уравнения
# D = b**2 - 4*a*c - дискриминант
# Если D<0, то уравнение не имеет вещественных корней
# Если D=0, то уравнение имеет один корень - x = -b/(2*a)
# Если D>0, то уравнение имеет два корня
# x1 = (-b - D**0.5)/(2*a)
# x2 = (-b + D**0.5)/(2*a)

P.S. D**0.5 - равносильно извлечению квадратного корня

НЕ РАБОТАЕТ ТАК
def linear_solve(a, b, c):
    return d=b**2-4*a*c
    if d<0:
        return "Уравнение не имеет вещественных корней"
    elif d==0:
        return "Уравнение имеет 1 корень" x=-b/(2*a)
    else:
        return "Уравнение имеет 2 корня" x1=(-b-d**0.5)/(2*a)
        x2=(-b+d**0.5)/(2*a)

print(linear_solve(0,1, 3))


def D(a, b, c):
    return b ** 2 - 4 * a * c
def quadratic_solve(a, b, c):
    if D(a, b, c) < 0:
        return "Нет вещественных корней"
    elif D(a, b, c) == 0:
        return -b / (2 * a)
    else:
        return (-b - D(a, b, c) ** 0.5) / (2 * a), (-b + D(a, b, c) ** 0.5) / (2 * a)
# print(quadratic_solve(1, 6, 3))
# print (D(1, 6, 3))

# разбили строку из input и преобразовали к float
# Ввод строки 1 0 -1
L = list(map(float, input().split()))
# Вывод [1.0, 0.0, -1.0]
# [1, 0, -1] - например
print(quadratic_solve(L["a", "b", "c"]))
# (-1.0, 1.0)


#Напишите рекурсивную функцию, находящую минимальный элемент списка без использование циклов и встроенной функции min().
def min_list(L):
    if len(L) == 1:
        return L[0]
    return L[0] if L[0] < min_list(L[1:]) else min_list(L[1:])
print(min_list('230451'))

#Напишите рекурсивную функцию, которая зеркально разворачивает число. Предполагается, что число не содержит нули.
def mirror(a, res=0):
    if a == 0:
        return res
    else:
        return mirror(a // 10, res * 10 + a % 10)
print(mirror(5607, res=0))

Поработаем над более сложной рекурсивной функцией. Сейчас попробуем реализовать функцию equal(N, S), проверяющую, совпадает ли сумма цифр числа N с числом S.
При написании программы следует обратить внимание на то, что, если S стала отрицательной, то необходимо сразу вернуть False.


def summa(N, S):
    if S < 0:
        return False
    if N < 10:
        return N == S
    else:
        return summa(N // 10, S - N % 10)
print(summa(5324, 14))

iter_obj = iter("Hello!")

print(next(iter_obj))
print(next(iter_obj))
print(next(iter_obj))
print(next(iter_obj))
print(next(iter_obj))
print(next(iter_obj))
print(next(iter_obj))


Пусть у нас есть функция, которая должна извлекать из базы данных какую-то информацию. На начальном этапе разработки мы не заботились о том, что это можно делать только при условии, что пользователь программы авторизовался, но сейчас время пришло. Попробуем написать декоратор, который позволяет вызвать функцию, только если она вызывается авторизованным пользователем.
yesno = input("""Введите Y, если хотите авторизоваться или N,
             если хотите продолжить работу как анонимный пользователь: """)

auth = yesno == "Y"

def is_auth(func):
    def wrapper():
        if auth:
            print("Пользователь авторизован")
            func()
        else:
            print("Пользователь неавторизован. Функция выполнена не будет")
    return wrapper

@is_auth
def from_db():
    print("some data from database")

from_db()

# Итак, разберем код по частям. Сначала мы спрашиваем у пользователя, хочет ли он авторизоваться. При авторизации на сайтах вы, наверное, не раз встречали такую ситуацию, что браузер помнит ваши логин и пароль, и не нужно их вводить каждый раз. Представим, что именно это мы и сделали — для авторизации достаточно ввести Y. После чего в переменную auth сохранили True, если пользователь авторизован.
#
# Следующий блок кода — сам декоратор, который в случае успешной авторизации выводит соответствующее сообщение и выполняет функцию. Если же пользователь не авторизовался, то также получаем соответствующее сообщение, но уже без вызова самой функции!
#
# Самая главная фишка декораторов в том, что такую обертку можно использовать для многих функций. Если в нашу программу хотим добавить еще одну функцию, для которой мы бы хотели сначала проверить авторизацию пользователя, достаточно всего лишь указать для нее декоратор.

@is_auth
def change_profile():
    print("Profile has been changed")


#Реализуйте функцию-декоратор, которая проверяет доступ к функции по username пользователя. Все username пользователей хранятся в глобальной области видимости в списке USERS. При согласии пользователя на авторизацию ему предлагается ввести username, который также хранится в глобальной области видимости. Функция должна использовать два декоратора: один для проверки авторизации вообще (реализован выше), второй — для проверки доступа.
USERS = ['admin', 'guest', 'director', 'root', 'superstar']

yesno = input("""Введите Y, если хотите авторизоваться или N,
             если хотите продолжить работу как анонимный пользователь: """)

auth = yesno == "Y"

if auth:
    username = input("Введите ваш username:")

@is_auth
@has_access
def from_db():
    print("some data from database")

from_db()

def has_access(func):
    def wrapper():
        if username in USERS:
            print("Авторизован как", username)
            func()
        else:
            print("Доступ пользователю", username, "запрещен")
    return wrapper

# (вес, рост)
data = [
   (82, 191),
   (68, 174),
   (90, 189),
   (73, 179),
   (76, 184)
]
sorted(data, key = lambda x: x[0] / x[1] ** 2)
print(min(data, key=lambda x: x[0] / x[1] ** 2))  # отбор по ключу
print(sorted(data, key = lambda x: x[0] / x[1] ** 2))


a = ["asd", "bbd", "ddfa", "mcsa"]
print(len(data, key=lambda a))

def greet(name):
    """Эта функция приветствует персону
    имя которой передается как параметр"""
    print("Hello, " + name + ". Good morning!")


greet('Иван')
a = input()
greet(a)

def add_element(a, b=[]):
    b.append(a)
    return b

print(add_element(4))
print(add_element(5))
print(add_element(7))
print(add_element(5))

def mf():
    x = 10
    print('Значение внутри ф-ии ', x)

x = 20
mf()
print('Значение вне ф-ии ', x)
